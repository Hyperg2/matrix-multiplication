assume cs:codesg,ds:datasg,ss:stacksg
stacksg segment			
	dw 0,0,0,0,0,0,0,0
stacksg ends

datasg segment
N equ 3;A矩阵的行数
M equ 6;B矩阵的行数，A矩阵的列数
P equ 3;B矩阵的列数
;------ matrix a ------
m1_r0       db  5,12,8,4,1,9
m1_r1       db  8,3,8,6,2,5
m1_r2       db 6,3,5,9,2,5
;----------------------

;------ matrix b ------
m2_c0       db  4,3,2
m2_c1       db  5,2,7
m2_c2       db  0,4,1
m2_c3       db  8,2,3
m2_c4       db  7,0,2
m2_c5       db  6,1,3
;----------------------

;--- result matrix ---
rm_r0 db P DUP (0);结果矩阵的大小由A与B而得来
rm_r1 db P DUP (0)
rm_r2 db P DUP (0)
;---------------------
datasg ends

codesg segment
    mov ss,ax
	mov sp,16
	mov ax,datasg
	mov ds,ax



MOV SI,0 ;A矩阵的行偏移量
MOV DI,0 ;B矩阵的列偏移量
MOV BX,0 ;结果矩阵的偏移量

MOV CX,N;外循环次数为A矩阵的行数

matrixLoop:
PUSH CX
mov CX,M;内循环的次数为B矩阵的列数
    mulLoop:
    CMP CX,M
    jne abc;判断是否是第一次进入内循环，如果是则将si，di入栈
    push si
    push di
    abc:mov AH,0
    mov AL,m1_r0[si];找到A矩阵中对应的数据
    mov DL,m2_c0[di];找到B矩阵中对应的数据
    mul DL;计算al*dl，结果保存在ax中
    add word ptr rm_r0[bx],ax;将所得积累加在结果矩阵对应位置中
    inc si;每进行一次乘法，si向前移动1
    add di,P;每进行一次乘法，di需要移动到下一行对应位置，因此di向前移动B矩阵的列数
    LOOP mulLoop
    add BX,1;此时完成一次累加，将结果矩阵的偏移量加一
    pop DI;此时还需进行下一次乘法，而si还需是进行计算该行第一个结果矩阵数据时的值
    pop SI;si与di相同，也需回到计算该行第一个数据时的值
    inc DI;此时需要将列偏移量向后偏移一位
    pop cx
    cmp SI,N*P;判断是否A矩阵已走到最后一位数据
    je exit;如果是则直接结束
    CMP di,P
    jne matrixLoop
    mov DI,0
    add si,M;对比di与B矩阵的列数，当二者相等时，则代表此时需要计算结果矩阵的下一行数据，所以将si的指向A矩阵的下一行，di则重新指向B矩阵的第一列
    LOOP matrixLoop
exit:
mov ax,4c00h
int 21h;结束
codesg ends
END
